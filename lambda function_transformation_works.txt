import json
import boto3
import base64
import gzip
from io import BytesIO
from datetime import datetime, timedelta

ec2 = boto3.client('ec2')
s3 = boto3.client('s3')

def lambda_handler(event, context):
    print("Received event:", json.dumps(event))
    
    enriched_logs = []
    header = "version\taccount-id\taction\tbytes\tdstaddr\tdstport\tend\tinstance-id\tinterface-id\tlog-status\tpackets\tpkt-dstaddr\tpkt-srcaddr\tprotocol\tsrcaddr\tsrcport\tstart\tsubnet-id\ttcp-flags\tvpc-id\ttype\tsecurity-group-ids\tnetwork-acl-id"
    enriched_logs.append(header)

    if 'records' not in event:
        print("Key 'records' not found in event.")
        return {
            'statusCode': 400,
            'body': json.dumps('KeyError: records not found in event')
        }
    
    for record in event['records']:
        enriched_log = None
        interface_id = None  # Initialize interface_id to avoid UnboundLocalError
        try:
            payload = base64.b64decode(record['data']).decode('utf-8').strip()
            print("Processing payload:", payload)
            
            fields = payload.split(' ')
            print("Extracted fields:", fields)
            
            # Assuming the order of fields in the customized format
            version = fields[0]
            account_id = fields[1]
            action = fields[2]
            bytes_transferred = int(fields[3])
            dstaddr = fields[4]
            dstport = int(fields[5])
            end = int(fields[6])
            instance_id = fields[7]
            interface_id = fields[8]
            log_status = fields[9]
            packets = int(fields[10])
            pkt_dstaddr = fields[11]
            pkt_srcaddr = fields[12]
            protocol = fields[13]
            srcaddr = fields[14]
            srcport = int(fields[15])
            start = int(fields[16])
            subnet_id = fields[17]
            tcp_flags = fields[18]
            vpc_id = fields[19]
            log_type = fields[20]
            
            eni_info = ec2.describe_network_interfaces(NetworkInterfaceIds=[interface_id])
            eni = eni_info['NetworkInterfaces'][0]
            security_group_ids = eni['Groups']
            security_group_ids_str = ','.join([group['GroupId'] for group in security_group_ids])
            
            # Get the Network ACL ID associated with the subnet
            acls_info = ec2.describe_network_acls(Filters=[{'Name': 'association.subnet-id', 'Values': [subnet_id]}])
            network_acl_id = acls_info['NetworkAcls'][0]['NetworkAclId']
            
            enriched_log = f"{version}\t{account_id}\t{action}\t{bytes_transferred}\t{dstaddr}\t{dstport}\t{end}\t{instance_id}\t{interface_id}\t{log_status}\t{packets}\t{pkt_dstaddr}\t{pkt_srcaddr}\t{protocol}\t{srcaddr}\t{srcport}\t{start}\t{subnet_id}\t{tcp_flags}\t{vpc_id}\t{log_type}\t{security_group_ids_str}\t{network_acl_id}"
            enriched_logs.append(enriched_log)
            
        except Exception as e:
            print(f"Error processing ENI {interface_id if interface_id else 'Unknown'}: {e}")
            continue
    
    # Get the current date and time in UTC+7 timezone
    now = datetime.utcnow() + timedelta(hours=7)
    year = now.year
    month = f"{now.month:02d}"
    day = f"{now.day:02d}"
    hour = f"{now.hour:02d}"
    
    # Save the enriched logs to S3 in .log.gz format
    try:
        bucket = 'vpc-flow-logs-stream'
        key = f'vpc_flow_logs/enriched/{year}/{month}/{day}/{hour}/{context.aws_request_id}.log.gz'
        body = '\n'.join(enriched_logs)
        
        # Compress the body using gzip
        out_buffer = BytesIO()
        with gzip.GzipFile(fileobj=out_buffer, mode='wb') as gz_file:
            gz_file.write(body.encode('utf-8'))
        
        s3.put_object(Bucket=bucket, Key=key, Body=out_buffer.getvalue())
    except Exception as e:
        print(f"Error saving to S3: {e}")
    
    return {
        'records': [{
            'recordId': record['recordId'],
            'result': 'Ok',
            'data': base64.b64encode(out_buffer.getvalue()).decode('utf-8')
        } for record in event['records']]
    }
